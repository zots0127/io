version: '3.8'

services:
  # Test database
  test-db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: io_test
    ports:
      - "5433:5432"
    volumes:
      - test-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d io_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # MinIO for S3 testing
  minio:
    image: minio/minio:latest
    ports:
      - "9001:9000"
      - "9002:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  # Main application for testing
  io-app:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      test-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://testuser:testpass@test-db:5432/io_test?sslmode=disable
      STORAGE_PATH: /app/storage
      API_PORT: 8080
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
      S3_BUCKET: test-bucket
      S3_REGION: us-east-1
      LOG_LEVEL: debug
      ENV: test
    ports:
      - "8081:8080"
    volumes:
      - ./storage:/app/storage
      - ./backups:/app/backups
    networks:
      - test-network
    command: ["/app/io"]

  # Test runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test
    depends_on:
      - io-app
    environment:
      API_BASE_URL: http://io-app:8080
      DATABASE_URL: postgres://testuser:testpass@test-db:5432/io_test?sslmode=disable
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minioadmin
      S3_SECRET_KEY: minioadmin
    volumes:
      - ./tests:/app/tests
      - ./coverage:/app/coverage
    networks:
      - test-network
    command: ["go", "test", "-v", "./tests/integration/...", "-coverprofile=/app/coverage/coverage.out"]

volumes:
  test-db-data:
  minio-data:

networks:
  test-network:
    driver: bridge