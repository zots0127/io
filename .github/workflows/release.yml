name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    name: Run Tests and Generate Report
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Run Unit Tests with Coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./... 2>&1 | tee test-results.txt
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out | tee coverage-summary.txt

      - name: Build test binary
        run: go build -o io .

      - name: Run Integration Tests
        run: |
          # Create test config
          cat > config.yaml << EOF
          storage:
            path: ./test-storage
            database: ./test-storage.db
          api:
            port: "8080"
            key: "test-api-key"
            mode: "hybrid"
          s3:
            enabled: true
            port: "9000"
            access_key: "minioadmin"
            secret_key: "minioadmin"
            region: "us-east-1"
          EOF
          
          # Start service
          export IO_API_KEY="test-api-key"
          ./io &
          IO_PID=$!
          sleep 5
          
          # Create test report
          echo "# Integration Test Report" > integration-tests.md
          echo "Date: $(date)" >> integration-tests.md
          echo "" >> integration-tests.md
          
          # Test Native API
          echo "## Native API Tests" >> integration-tests.md
          echo "" >> integration-tests.md
          
          echo "### Upload Test" >> integration-tests.md
          echo "test content" > test.txt
          RESPONSE=$(curl -s -X POST http://localhost:8080/api/store \
            -H "X-API-Key: test-api-key" \
            -F "file=@test.txt")
          SHA1=$(echo $RESPONSE | grep -o '"sha1":"[^"]*' | cut -d'"' -f4)
          if [ -n "$SHA1" ]; then
            echo "✅ Upload successful - SHA1: $SHA1" >> integration-tests.md
          else
            echo "❌ Upload failed" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md
          
          echo "### Download Test" >> integration-tests.md
          curl -s http://localhost:8080/api/file/$SHA1 \
            -H "X-API-Key: test-api-key" \
            -o downloaded.txt
          if diff test.txt downloaded.txt > /dev/null; then
            echo "✅ Download successful - Content matches" >> integration-tests.md
          else
            echo "❌ Download failed - Content mismatch" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md
          
          # Test S3 API
          echo "## S3 API Tests" >> integration-tests.md
          echo "" >> integration-tests.md
          
          echo "### Bucket Creation" >> integration-tests.md
          curl -s -X PUT http://localhost:9000/test-bucket
          echo "✅ Bucket created" >> integration-tests.md
          echo "" >> integration-tests.md
          
          echo "### Object Upload" >> integration-tests.md
          curl -s -X PUT http://localhost:9000/test-bucket/test-key \
            -d "S3 test content"
          echo "✅ Object uploaded" >> integration-tests.md
          echo "" >> integration-tests.md
          
          echo "### Object Download" >> integration-tests.md
          CONTENT=$(curl -s http://localhost:9000/test-bucket/test-key)
          if [ "$CONTENT" = "S3 test content" ]; then
            echo "✅ Object downloaded successfully" >> integration-tests.md
          else
            echo "❌ Object download failed" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md
          
          # Generate summary
          echo "## Test Summary" >> integration-tests.md
          # Test Web Interface
          echo "## Web Interface Tests" >> integration-tests.md
          echo "" >> integration-tests.md

          echo "### Dashboard Accessibility" >> integration-tests.md
          DASH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/)
          if [ "$DASH_STATUS" = "200" ]; then
            echo "✅ Dashboard accessible - HTTP $DASH_STATUS" >> integration-tests.md
          else
            echo "❌ Dashboard not accessible - HTTP $DASH_STATUS" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md

          echo "### File Management Interface" >> integration-tests.md
          FILES_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/files)
          if [ "$FILES_STATUS" = "200" ]; then
            echo "✅ Files page accessible - HTTP $FILES_STATUS" >> integration-tests.md
          else
            echo "❌ Files page not accessible - HTTP $FILES_STATUS" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md

          echo "### Web API Functionality" >> integration-tests.md
          echo "test web content" > webtest.txt
          WEB_RESPONSE=$(curl -s -X POST http://localhost:8080/api/web/files/upload \
            -F "file=@webtest.txt" \
            -F "uploaded_by=test_user" \
            -F "description=web interface test")
          WEB_SHA1=$(echo $WEB_RESPONSE | grep -o '"sha1":"[^"]*' | cut -d'"' -f4)
          if [ -n "$WEB_SHA1" ]; then
            echo "✅ Web API upload successful - SHA1: $WEB_SHA1" >> integration-tests.md

            # Test download
            curl -s http://localhost:8080/api/web/files/$WEB_SHA1/download -o web_downloaded.txt
            if diff webtest.txt web_downloaded.txt > /dev/null; then
              echo "✅ Web API download successful - Content matches" >> integration-tests.md
            else
              echo "❌ Web API download failed - Content mismatch" >> integration-tests.md
              kill $IO_PID
              exit 1
            fi
          else
            echo "❌ Web API upload failed" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md

          echo "### Monitoring Interface" >> integration-tests.md
          MONITOR_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/monitor)
          MONITOR_API=$(curl -s http://localhost:8080/api/web/monitor)
          if [ "$MONITOR_STATUS" = "200" ] && echo "$MONITOR_API" | grep -q "timestamp"; then
            echo "✅ Monitor interface working - HTTP $MONITOR_STATUS" >> integration-tests.md
          else
            echo "❌ Monitor interface not working - HTTP $MONITOR_STATUS" >> integration-tests.md
            kill $IO_PID
            exit 1
          fi
          echo "" >> integration-tests.md

          # Generate summary
          echo "## Test Summary" >> integration-tests.md
          echo "- Native API: ✅ Passed" >> integration-tests.md
          echo "- S3 API: ✅ Passed" >> integration-tests.md
          echo "- Web Interface: ✅ Passed" >> integration-tests.md
          echo "- Web API: ✅ Passed" >> integration-tests.md
          echo "- Monitoring: ✅ Passed" >> integration-tests.md
          echo "- All tests completed successfully!" >> integration-tests.md

          kill $IO_PID

      - name: Generate Test Report
        run: |
          # Create comprehensive test report
          cat > test-report.md << 'EOF'
          # Test Report for IO Storage Service
          
          ## Test Execution Details
          - **Date**: $(date)
          - **Commit**: ${{ github.sha }}
          - **Tag**: ${{ github.ref_name }}
          - **Go Version**: $(go version)
          
          ## Unit Test Results
          EOF
          
          echo '```' >> test-report.md
          cat test-results.txt >> test-report.md
          echo '```' >> test-report.md
          
          echo "" >> test-report.md
          echo "## Code Coverage Summary" >> test-report.md
          echo '```' >> test-report.md
          cat coverage-summary.txt >> test-report.md
          echo '```' >> test-report.md
          
          echo "" >> test-report.md
          cat integration-tests.md >> test-report.md

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            test-report.md
            coverage.html
            coverage-summary.txt
            integration-tests.md
            test-results.txt

  build:
    name: Build and Release
    needs: test  # Only build after tests pass
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: linux
            goarch: arm
            goarm: 7
            suffix: linux-armv7
          # macOS
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          # Windows
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
          - goos: windows
            goarch: arm64
            suffix: windows-arm64.exe
          # FreeBSD
          - goos: freebsd
            goarch: amd64
            suffix: freebsd-amd64
          - goos: freebsd
            goarch: arm64
            suffix: freebsd-arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get dependencies
        run: go mod download

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
        run: |
          go build -ldflags="-s -w" -o io-${{ matrix.suffix }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: io-${{ matrix.suffix }}
          path: io-${{ matrix.suffix }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create checksums
        run: |
          cd artifacts
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              sha256sum * > ../../checksums.txt || true
              cd ..
            fi
          done

      - name: Prepare Test Reports
        run: |
          # Copy test reports to root for easy access
          if [ -d "artifacts/test-reports" ]; then
            cp artifacts/test-reports/test-report.md ./test-report.md || true
            cp artifacts/test-reports/coverage.html ./coverage.html || true
            cp artifacts/test-reports/coverage-summary.txt ./coverage-summary.txt || true
            
            # Create a test badge
            COVERAGE=$(grep "total:" artifacts/test-reports/coverage-summary.txt | awk '{print $3}' | sed 's/%//')
            echo "Test Coverage: ${COVERAGE}%" > test-badge.txt
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}
          files: |
            artifacts/*/io-*
            checksums.txt
            test-report.md
            coverage.html
            coverage-summary.txt
          body: |
            ## 🎉 IO Storage Release - Web Management Interface

            This release includes a comprehensive MinIO-like web management interface!

            ### ✨ New Features
            - 🖥️ Modern responsive Dashboard with real-time statistics
            - 📁 Complete file management interface with advanced filtering
            - 📤 Drag-and-drop file upload with metadata configuration
            - 📊 Real-time system monitoring with Chart.js visualization
            - ⚙️ Administrative settings interface
            - 📱 Mobile-responsive design with Tailwind CSS

            ### 🌐 Web Interface Access
            After running the binary, access:
            - Dashboard: http://localhost:8080/
            - Files: http://localhost:8080/files
            - Upload: http://localhost:8080/upload
            - Monitor: http://localhost:8080/monitor
            - Settings: http://localhost:8080/settings

            ## Test Results

            ✅ **All tests passed!** See attached test reports for details:
            - `test-report.md` - Full test execution report including web interface tests
            - `coverage.html` - Interactive code coverage report
            - `coverage-summary.txt` - Coverage summary

            ## Download

            | Platform | Architecture | File |
            |----------|--------------|------|
            | Linux | x86_64 | `io-linux-amd64` |
            | Linux | ARM64 | `io-linux-arm64` |
            | Linux | ARMv7 | `io-linux-armv7` |
            | macOS | Intel | `io-darwin-amd64` |
            | macOS | Apple Silicon | `io-darwin-arm64` |
            | Windows | x86_64 | `io-windows-amd64.exe` |
            | Windows | ARM64 | `io-windows-arm64.exe` |
            | FreeBSD | x86_64 | `io-freebsd-amd64` |
            | FreeBSD | ARM64 | `io-freebsd-arm64` |

            ## Installation

            ### Linux/macOS/FreeBSD
            ```bash
            # Download the binary for your platform
            wget https://github.com/zots0127/io/releases/download/${{ github.ref_name }}/io-YOUR_PLATFORM
            
            # Make it executable
            chmod +x io-YOUR_PLATFORM
            
            # Move to PATH (optional)
            sudo mv io-YOUR_PLATFORM /usr/local/bin/io
            ```

            ### Windows
            Download the `.exe` file and run it directly, or add it to your PATH.

            ## Verify checksums
            ```bash
            sha256sum -c checksums.txt
            ```